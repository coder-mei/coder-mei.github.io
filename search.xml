<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[安卓开发笔记：SharedPrefernces]]></title>
    <url>%2F2019%2F03%2F20%2F%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%9ASharedPrefernces%2F</url>
    <content type="text"><![CDATA[作用保存瞬时数据，可用于偏好设定的保存。 使用方法 使用SharedPreferences 1private SharedPreferences mSharedPreferences; 获取SharedPreferencesgetSharedPreferences 参数1：文件名，参数2：操作模式。如果文件不存在则会新建一个，文件路径：/data/data/包名/shared_prefs/***.xml 1mSharedPreferences = getSharedPreferences("demo_preferences", MODE_PRIVATE); 保存数据putBoolean 参数1：键名，参数2：键值。 123SharedPreferences.Editor editor = mSharedPreferences.edit();editor.putBoolean("check_box_value", isChecked);editor.apply(); 获取保存的数据getBoolean 参数1：键名，参数2：默认返回值，返回值：键值。 1boolean isChecked = getPreferences(MODE_PRIVATE).getBoolean("check_box_value", false); 全部代码 123456789101112131415161718192021222324252627private SharedPreferences mSharedPreferences;@Overrideprotected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.perferences_activity_main); // 获取SharedPreferences。 mSharedPreferences = getSharedPreferences("demo_preferences", MODE_PRIVATE); CheckBox checkBox = findViewById(R.id.checkBox); checkBox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() &#123; @Override public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) &#123; SharedPreferences.Editor editor = mSharedPreferences.edit(); // 保存数据 editor.putBoolean("check_box_value", isChecked); editor.apply(); &#125; &#125;); if (mSharedPreferences == null) &#123; return; &#125; // 获取保存的数据 boolean isChecked = getPreferences(MODE_PRIVATE).getBoolean("check_box_value", false); checkBox.setChecked(isChecked);&#125; 操作模式 mode 作用 MODE_PRIVATE 默认模式，仅能被当前app访问、或者有相同id的app MODE_WORLD_READABLE 其他的app可读（官方不推荐） MODE_WORLD_WRITEABLE 其他的app可写（官方不推荐） MODE_MULTI_PROCESS 允许多进程访问（官方不推荐）]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓开发笔记：AndroidStudio工程瘦身]]></title>
    <url>%2F2019%2F03%2F20%2F%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%B7%A5%E7%A8%8B%E7%98%A6%E8%BA%AB%2F</url>
    <content type="text"><![CDATA[摘要用Android Studio开发安卓项目时，有时会想移动或复制项目，可项目太大，移动或复制麻烦，那么哪些文件可以删除呢？ 可以删除文件加及文件1234567/.gradle/.idea/build/app/build/local.properties/*.iml/app/*.iml 批处理可以写一个批处理文件，如remove.bat，将此批处理文件放在项目根目录，双击执行即可删除上记文件及文件夹。remove.bat里的代码如下： rmdir /s /q build rmdir /s /q app\build rmdir /s /q .gradle rmdir /s /q .idea del local.properties del /a /f /s *.iml]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>AndroidStudio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式笔记：知识体系结构]]></title>
    <url>%2F2019%2F03%2F19%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[创建型 单例模式 Singleton Pattern 原型模式 Prototype 建造者模式 Builder 工厂方法模式 Factory Method 抽象工厂 Abstract Factory 结构型 代理模式 Proxy Pattern 外观模式 Facade Pattern 适配器模式 Adapter Pattern 装饰模式 Decorator Pattern 组合模式 Composite Pattern 享元模式 Proxy Pattern 桥接模式 Bridge Pattern 行为型 模板方法 Template Method 命令模式 Command Pattern 迭代器模式 Iterator Pattern 观察者模式 Observer Pattern 解释器模式 Interpreter Pattern 中介者模式 Mediator Pattern 职责链模式 Chain of Responsibility Pattern 备忘录模式 Memento Pattern 策略模式 Strategy Pattern 访问者模式 Visitor Pattern 状态模式 State Pattern Null Object模式 Null Object Pattern MonoState模式 MonoState Pattern 五星：完全掌握，没有可再学习的内容。四星：熟练掌握，可以游刃有余的使用，剩余不常见知识点没深究。三星：基本掌握，核心知识点已掌握，在项目中使用已没有问题。二星：简单掌握，学习过核心知识点，在项目中使用过两三次，还有部分内容仍需要学习。一星：知道什么场景使用，只使用过一次。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>知识体系结构</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安卓开发笔记：知识体系结构]]></title>
    <url>%2F2019%2F03%2F19%2F%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%9A%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[基础知识 java基础 数据结构 面向对象思想 Android Studio快捷键（四星） Android Studio使用技巧 Android SDK Activity（四星） Service（二星） BroadcastReceiver（二星） ContentProvider ActionBar Fragment（四星） 数据持久化 SharedPreferences（三星） Sqlite SQLiteOpenHelper ContentProvider File Internal Storage Extermal Storage UILayout FrameLayout LinearLayout TableLayout GridLayout RelativeLayout DrawerLayout SlidingPaneLayout TabLayout ConstraintLayout Widgets TextView Button RadioButton CheckBox Switch ToggleButton ImageButton ImageView ProgressBar（一星） SeekBar（一星） RatingBar（一星） Spinner WebView Containers RadioGroup ListView GridView ExpandableListView ScrollView TabHost SlidingDrawer Gallery VideoView DialerFilter RecyclerView CardView Date&amp;Time AnalogClock（一星） Chronometer DatePicker（一星） TimePicker（一星） CalendarView Expert Space CheckedTextView QuickContactBadge ExtractEditText AutoCompleteTextView MultiAutoCompleteText NumberPicker ZoomButton ZoomController GestureOverlayView SurfaceView TexttureView StackView ViewStub ViewAnimator ViewFlipper ViewSwitcher ImageSwitcher TextSwitcher AdapterViewFlipper ViewPager include fragment requestFocus Custom View 继承原生控件（四星） 组合控件（四星） 继承View（三星） anim TweenAnimation FrameAnimation ValueAnimator ObjectAnimator AnimatorSet Resource AssetManager anim animator color drawable interpolator layout menu raw values xml OpenGL OpenGL 通信 Http Socket Bluetooth NFC Headset USB 性能 布局层次结构 抽象布局使用 HierarchyViewer Lint工具 OOM ANR Heap adb shell TraceView Dalvik日志 logcat MAT 电量优化 流量优化 调试 Logcat adb HierarchyViewer TraceView Heap Lint 适配 OS Version Screen Size Screen px 测试 Monkey MonkeyRunner JUnit Robotium Appium Athrun(TMTS) UIAutomator 安全 服务器安全 通信安全 数据加密 数据验签 代码混淆 webview/JS安全调用 MD5、DES、RSA、https、证书、权限 NDK JNI C语言 C++ 手机功能 电话 短/彩信 Camera Audio SD卡 感应器 第三方扩展 地图 语音识别 支付 统计分析 广告 其他 Intent AndroidManifest AIDL wifi 国际化 PopuWindow 五星：完全掌握，没有可再学习的内容。四星：熟练掌握，可以游刃有余的使用，剩余不常见知识点没深究。三星：基本掌握，核心知识点已掌握，在项目中使用已没有问题。二星：简单掌握，学习过核心知识点，在项目中使用过两三次，还有部分内容仍需要学习。一星：知道什么场景使用，只使用过一次。]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>知识体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AndroidStudio笔记：快捷键及编码技巧]]></title>
    <url>%2F2019%2F03%2F19%2FAndroidStudio%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%8F%8A%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[摘要本文集中记载了AndroidStudio快捷键及编码技巧，博主会持续更新。另外，我还制作了一个屏保，可设置为桌面或AndroidStudio背景，以备记忆。 窗口 Project窗口 Alt + 1 | Cmd + 1 Favorites窗口 Alt + 2 | Cmd + 2 Find窗口 Alt + 3 | Cmd + 3 Run窗口 Alt + 4 | Cmd + 4 Debug窗口 Alt + 5 | Cmd + 5 Logcat窗口 Alt + 6 | Cmd + 6 Structure窗口 Alt + 7 | Cmd + 7 Version Control窗口 Alt + 9 | Cmd + 9 Terminal窗口 Alt + 9 | Cmd + 9 继承窗口 Ctrl + H | Ctrl + H 显示大纲 Ctrl + F12 显示VCS Operations Alt + ~ 显示常用窗口 Alt + F1 | Alt + F1 编辑窗口最大化 Ctrl + Shift + F12 并排显示两个编辑器窗口 编辑器选项卡-&gt;右键-&gt;Split Vertically/Split Horizontally 注释 行注释 Ctrl + / | Cmd + / 块注释 Ctrl + Shift + / | Cmd + Alt+ / TODO注释 todo FIX注释 fixme 展开 Ctrl + + | Cmd + + 折叠 Ctrl + - | Cmd + - 全部展开 Ctrl + Shift + + | Cmd + Shift + + 全部折叠 Ctrl + Shift + - | Cmd + Shift + - 代码补全 快速修复 Alt + Enter 插入动态模板 Ctrl + J | Cmd + J 插入surround动态模板 Ctrl + Alt + J | Cmd + Alt + J 设置动态模板 File -&gt; Setting -&gt; Editor -&gt; Live Templates 代码补全 Ctrl + Space | Ctrl + Space SmartType代码补全 Ctrl + Shift + Space | Ctrl + Shift + Space 使用文档用过的单次进行代码补全 Alt + / | Alt + / 使用文档用过的单次进行（向下）代码补全 Alt + Shift + / | Alt + Shift + ? 插入嵌套 Ctrl + Alt + T | Cmd + Alt + T 向上插入一行 Ctrl + Alt + Enter 向下插入一行 Shift + Enter 增加成员方法 Alt + Insert | Cmd + N 重写 Ctrl + O 实现接口方法 Ctrl + I 编辑 撤销 Ctrl + Z | Cmd + Z 重做 Ctrl + Shift + Z 大小写转换 Ctrl + Shift + U 选中 选中单词 Ctrl + W | Alt + 上箭头 向上/下移动选中行 Ctrl + Shift + 上/下箭头 | Cmd + Shift + 上/下箭头 向上/下移动选中行、忽略语法 Alt + Shift + 上/下箭头 | Alt + Shift + 上/下箭头 多行选中 Alt + 鼠标左键 复制粘贴 快速复制 Ctrl + D 复制绝对路径 Ctrl + Shift + C | Cmd + Shift + C 复制相对路径/方法变量的逻辑引用 Ctrl + Alt + Shift + C | Cmd + Alt + Shift + C 粘贴堆栈里的剪贴板 Ctrl + Shift + V | Cmd + Shift + V 删除 删除当前行 Ctrl + Y 删除未使用的导入 Ctrl + Alt + O | Cmd + Alt + O 删除嵌套 Ctrl + Shift + Delete | Cmd + Shift + Delete 跳转 编辑器选项卡切换 Alt + 左/右 | Ctrl + 左/右 跳转至上一次编辑之处 Ctrl + Shift + Backspace | Cmd + Shift + Backspace 跳转至声明 Ctrl + B（鼠标左键） | Cmd + B（鼠标左键） 跳转行号 Ctrl + G | Cmd + L 倒退/前进 Ctrl + Alt + 左/右 上一个/下一个函数 Alt + 上/下 括号匹配 Ctrl + [/] 浏览最近操作过的文件 Ctrl + E 定位错误 F2 重构 格式化文档 Ctrl + Alt + L | Cmd + Alt + L 设置格式化内容 Ctrl + Alt + Shift + L | Cmd + Alt + Shift + L 抽取方法 Ctrl + Alt + M 抽取参数 Ctrl + Alt + P | Cmd + Alt + P 抽取变量 Ctrl + Alt + V | Cmd + Alt + V 抽取常量 Ctrl + Alt + C | Cmd + Alt + C 抽取字段/局部变量转全局变量 Ctrl + Alt + F | Cmd + Alt + F 重命名 Shift + F6 重构方法参数/返回值 Ctrl + F6 | Cmd + F6 重构参数类型 Ctrl + Shift + F6 | Cmd + Shift + F6 代理代替继承 选中文件 -&gt; 右键 -&gt; Refactor -&gt; Replace Inheritance with Delegation 移动成员到其他类 F6 子类/父类成员上拉/下推 选中文件 -&gt; 右键 -&gt; Refactor -&gt; Pull Members Up/Push Members Down 调试 调试程序 Shift + F9 运行程序 Shift + F10 追加断点 Ctrl + F8 进入函数 F7 单步执行 F8 跳出函数 Shift + F8 继续执行 F9 书签 追加/删除书签 F11 追加带标记书签 Ctrl + F11 显示全部书签 Shift + F11 将文件添加到收藏 选中文件-&gt;右键-&gt;Add to Favorites 查找 查看关联文件 Ctrl + Alt+ Home | Alt + Cmd + 上箭头 类内查找 Ctrl + F 全局查找 Ctrl + Shift + F 类内替换 Ctrl + R 全局替换 Ctrl + Shift + R 查找文件 Ctrl + Shift + N | Cmd + Shift + O 查找类 Ctrl + N | Cmd + O 查找调用 Alt + F7 获取帮助 Ctrl + Shift + A | Cmd + Shift + A 设置 输入代码时，不区分大小写也能弹出代码提示 File -&gt; Settings -&gt; Editor -&gt; General -&gt; Code Completion -&gt; Case sensitive completion选择none]]></content>
      <categories>
        <category>AndroidStudio</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>AndroidStudio</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AndroidStudio笔记：AndroidStudio快捷键屏保]]></title>
    <url>%2F2019%2F03%2F19%2FAndroidStudio%E7%AC%94%E8%AE%B0%EF%BC%9AAndroidStudio%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%B1%8F%E4%BF%9D%2F</url>
    <content type="text"><![CDATA[摘要本文集中记载了AndroidStudio快捷键及编码技巧的图片，鼠标右键点保存，即可保存到本地。可设置为桌面或AndroidStudio工具背景，以备记忆。文字版博文请参照AndroidStudio笔记：快捷键及编码技巧。 尺寸：1024*768]]></content>
      <categories>
        <category>AndroidStudio</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>AndroidStudio</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMock笔记：如何等待异步事件]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%A6%82%E4%BD%95%E7%AD%89%E5%BE%85%E5%BC%82%E6%AD%A5%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[问题描述当源代码是异步时，如何写mock？ 代码实现12345678910111213141516171819202122232425public: virtual BOOL Wait( enum WAITINFO info, const U_LONG msec = 10000 );private: NWaitObject m_Wait;BOOL _stub_ClassA::Wait( enum WAITINFO inf, const U_LONG msec)&#123; BOOL ret = FALSE; ret = m_Wait.Wait(msec); if (FALSE == ret)&#123; return FALSE; &#125; if ( inf != m_Wait.GetInfo())&#123;return FALSE; &#125; return TRUE;&#125;enum WAITINFO&#123; WAITINFO_A = 0&#125;;void _stub_MethodA::MethodB()&#123; m_Wait.Notify(WAITINFO_A);&#125;if ( true == m_ClassA-&gt;Wait(WAITINFO_A) ) &#123;…… &#125;]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMock笔记：既想Mock又想调用自定义函数]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9A%E6%97%A2%E6%83%B3Mock%E5%8F%88%E6%83%B3%E8%B0%83%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[问题描述既想Mock又想调用自定义函数。 代码实现当源码调用了MethodA时，既可以期望MethodA，也可以调用自定义的Myself_MethodA逻辑123456789Mock_ClassA() &#123; ON_CALL(*this, MethodA(_)) .WillByDefault(Invoke(this, &amp;Mock_Class::Myself_MethodA)); &#125;; MOCK_METHOD1( MethodA, void( int par ) ); void Myself_MethodA ( int par )&#123; …… &#125; EXPECT_CALL(*(m_ClassA), MethodA(_)) .Times(1);]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMock笔记：Feature的格式]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9AFeature%E7%9A%84%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Feature：名称，生成后作为类名及文件名。Background：每个测试case执行前都会执行Background下的内容。Scenario：测试case的名称。Given：前期准备。When：当执行某个命令时。Then：执行When后的结果。And：并列，可接到Given、When、Then后。@guid-：唯一的id，不可重复。|格数|：表头。作为参数生成。|1 |：值。作为参数值生成。 例：123456789101112131415161718192021222324252627282930313233343536Feature: Bowling game作为玩家，为了了解自己的成绩，想看的投球和记分情况。@guid-2da57f00-eb8d-4759-bdd3-ea11a6ec689e#No.1Scenario: Roll first time玩家第一次投球。 When 击倒1个球瓶 Then 通知界面如下信息 |格数|第一次击倒数|第二次击倒数|格数分| |1 |1 | | |@guid-12288b38-c3c4-4cf8-9664-f2cdec0520e7#No.2 Scenario: Roll twice玩家第二次投球。 Given 击倒1个球瓶 When 击倒4个球瓶 Then 通知界面如下信息 |格数|第一次击倒数|第二次击倒数|格数分| |1 |1 |4 |5 |@guid-91290c33-a3e0-491a-a653-f5edc1377757#No.3Scenario: Spare frame without next roll玩家补中后，还没有投球。 When 击倒4个球瓶 And 击倒6个球瓶 Then 通知界面如下信息 |格数|第一次击倒数|第二次击倒数|格数分| |1 |4 |6 | |]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMock笔记：GoogleMock测试工程文件目录结构]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9AGoogleMock%E6%B5%8B%E8%AF%95%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[文件夹 作用 External 源代码的外部接口。 Mock 存放Mock文件，Mock源代码的外部接口，也就是External里的文件。mock开头文件。 Stub 桩文件，为源代码的内部代码做桩用。stub开头文件。 SUT 放源代码。 TestCaseModel 放测试代码用的共通类，如GherkinTable.h、FeatureTestModel.h、FeatureStepModel.h等 TestCode 有TestDSL文件夹、Feature文件夹。放···Feature.cpp、···Steps.cpp/h、。···TestModel.h/cpp测试代码。 Feature 放.Feature文件。 TestDSL 放···TestModel.h/cpp与源码之间交互的文件。]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMock笔记：Mock非虚函数]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9AMock%E9%9D%9E%E8%99%9A%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[问题描述想要Mock接口，接口必须是虚函数。如果想要Mock的接口都是非虚函数，怎么办呢？ 如：想MockMethodA12345class ClassA&#123;public: void MethodA();&#125; 解决方案添加一个适配器，让该适配器的方法直接调用MethodA()。然后Mock适配器的方法。 代码实现12345678910class ClassA_Adapter&#123;private: ClassA m_ClassA;public: virtual void MethodA() &#123; m_ClassA.MethodA(); &#125;&#125; 12345class MockClassA : public ClassA_Adapter&#123;public: MOCK_METHOD0(MethodA, void());&#125;;]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMock笔记：测试函数无法使用private和protected成员]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%A7%A3%E6%B5%8B%E8%AF%95%E5%87%BD%E6%95%B0%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8private%E5%92%8Cprotected%E6%88%90%E5%91%98%20-%20%E3%82%B3%E3%83%94%E3%83%BC%2F</url>
    <content type="text"><![CDATA[问题描述ClassA友元ClassATest，但ClassATest里的测试类不能访问ClassA里的private和protected的成员或方法。 解决方案ClassATest可以访问ClassA中的private和protected，所以在ClassATest里追加方法去访问private或protected。而测试类(TEST_F())里再调用ClassATest追加的方法。 代码实现123456class ClassA&#123;friend public ClassATest private: int MethodA();&#125; 1234567class ClassATest&#123;private: ClassA m_ClassA;protected: int MethodA()&#123; return m_ClassA.MethodA(); &#125;//调用ClassA里的MethodA()&#125; 1234TEST_F( ClassATest, MethodATest )&#123; int ret = MethodA();//调用ClassATest里的MethodA()&#125;]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GoogleMock笔记：解决期望在动作之前执行的问题]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9A%E8%A7%A3%E5%86%B3%E6%9C%9F%E6%9C%9B%E5%9C%A8%E5%8A%A8%E4%BD%9C%E4%B9%8B%E5%89%8D%E6%89%A7%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[问题描述在Google Mock中，期望是在动作之前执行的。所以我们在测试过程中，会发现因为动作还没有做，就执行了期望，导致产生NG项。 解决方案 把期望加到Expectation List中，把动作加到Action List中。 在执行用例时，先调用Expectation List里的期望，再调用Action List里的动作。 代码实现12345void TestModel::MethodA()&#123; ActionTemplate&lt;TestModel&gt;* p_action_cmd = new ActionTemplate&lt;TestModel&gt; (this,&amp;TestModel:: MethodA_Action); AddAction((ITestAction*)p_action_cmd);// 动作加到Action List&#125; 1234void TestModel::MethodA_Action()&#123; m_pRealClass-&gt;MethodA();&#125; 12345void TestModel::MethodB()&#123; ActionTemplate&lt; TestModel&gt;* p_expectation_cmd = new ActionTemplate&lt; TestModel&gt; (this,&amp; TestModel:: MethodB_Expectation); AddExpectation((ITestAction*)p_expectation_cmd);// 动作加到Expectation List&#125; 12void TestModel::MethodB_Expectation()&#123; //期望 EXPECT_CALL()…… &#125; 12345678void Execute()&#123; Execute(s_ExpectationList); //先执行期望MethodB_Expectation () Execute(s_ActionList);// 再执行动作MethodA_Action() IndirectFunctionCaller::Instance()-&gt;DoCallBacks(); VerifyExpectationsOfAllModels(); Clear();&#125;]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Mock笔记：GoogleMock高级语法]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9AGoogleMock%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[摘要本文主要记载Google Mock进阶学习知识点，讲述Google Mock的高级语法，以及在进行Google Mock中常见的问题。基础知识点请参照博主的另一篇文章GoogleMock笔记：GoogleMock基础语法。 Mock函数权限Mock函数定义为public，这样做是为了让ON_CALL和EXPECT_CALL可以从Mock类外引用Mock函数。 Mock重载函数和Mock其他函数一样。注意：如果你并不Mock所有的重载函数，编译器会警告你基类中的一些函数被隐藏了。修正的方法是用using将它们引入域中： 1234567class MockFoo : public Foo &#123; ... using Foo::Add; MOCK_METHOD1(Add, int(Element x)); // 我们不想mock另一个重载函数int Add(int times, Element x); ... &#125;; Mock模板类在MOCK_*宏后加上_T。1234567template &lt;typename Elem&gt; class StackInterface &#123; ... virtual ~StackInterface(); virtual int GetSize() const = 0; virtual void Push(const Elem&amp; x) = 0; &#125;; 123456template &lt;typename Elem&gt; class MockStack : public StackInterface&lt;Elem&gt; &#123; ... MOCK_CONST_METHOD0_T(GetSize, int()); MOCK_METHOD1_T(Push, void(const Elem&amp; x)); &#125;; Mock非虚函数第一种方法：添加一个中间类，请参照GoogleMock笔记：Mock非虚函数第二种方法：使用模板。在正式代码中，用ConcretePacketStream来实例化，在测试中你用MockPacketStream来实例化123template &lt;class PacketStream&gt; void CreateConnection(PacketStream* stream)&#123; ... &#125; 12345template &lt;class PacketStream&gt; class PacketReader &#123; public: void ReadPackets(PacketStream* stream, size_t packet_num); &#125;; 在正式代码中使用CreateConnection()和PacketReader，在测试代码中使用CreateConnection和PacketReader：123MockPacketStream mock_stream; EXPECT_CALL(mock_stream, ...)...; PacketReader&lt;MockPacketStream&gt; reader(&amp;mock_stream); 两个方法都需要修改正式代码。 调用没有被期望的Mock函数 如果一个没有指定EXPECT_CALL的Mock函数被调用了，Google Mock会打印一个”uninteresting call”警告。用NiceMock重写测试 12345using ::testing::NiceMock; TEST(...) &#123; NiceMock&lt;MockFoo&gt; mock_foo; EXPECT_CALL(mock_foo, DoThis()); &#125; NiceMock是MockFoo的一个子类，所以它在任何接受MockFoo类型的地方使用。在MockFoo的构造函数是有参数的时候也是可以用的，因为NiceMock“继承”了MockFoo的构造函数。 1234using ::testing::NiceMock; TEST(...) &#123; NiceMock&lt;MockFoo&gt; mock_foo(5, "hi"); EXPECT_CALL(mock_foo, DoThis()); &#125; 当希望把”uninteresting call”这些警告当成错误时，可以用StickMock。 12345using ::testing::StrictMock; TEST(...) &#123; StrictMock&lt;MockFoo&gt; mock_foo; EXPECT_CALL(mock_foo, DoThis()); &#125; 被Mock函数参数列表很长12345678class LogSink &#123; public: ... virtual void send(LogSeverity severity, const char* full_filename, const char* base_filename, int line, const struct tm* tm_time, const char* message, size_t message_len) = 0; &#125;; 12345678910111213class ScopedMockLog : public LogSink &#123; public: ... virtual void send(LogSeverity severity, const char* full_filename, const char* base_filename, int line, const tm* tm_time, const char* message, size_t message_len) &#123; Log(severity, full_filename, std::string(message, message_len)); &#125; //只Mock三个参数。 MOCK_METHOD3(Log, void(LogSeverity severity, const string&amp; file_path, const string&amp; message)); &#125;; 为了使用Mock，如何设计正式代码经常会发现你正在用一些没有针对接口实现的类。为了可以用这种类( 且称为Concrete类 )来测试自己的代码，可能会试着将Concrete的函数变为虚函数，然后再去Mock它。不要这么做，取而代之的是，并不直接调用Concrete类，而是定义一个接口去调用Concrete类。然后在Concrete类之上实现这个接口，即配接器。 已经用Fake实现的接口想要Mock这个接口，比如想在它上面设置期望。但是还想用FakeFoo作为Mock类函数的默认行为12345678910class Foo &#123; public: virtual char DoThis(int n) = 0; &#125;; class FakeFoo : public Foo &#123; public: virtual char DoThis(int n) &#123; return (n &gt; 0) ? '+' : (n &lt; 0) ? '-' : '0'; &#125;&#125;; 123456789class MockFoo : public Foo &#123; public: MOCK_METHOD1(DoThis, char(int n)); void DelegateToFake() &#123; ON_CALL(*this, DoThis(_)) .WillByDefault(Invoke(&amp;fake_, &amp;FakeFoo::DoThis)); &#125; private: FakeFoo fake_; &#125;; Fack和Mock搅在一起不好，该设计仅用于重构上。 使用被Mock既存逻辑想期望又想调用真实的代码逻辑12345678910using ::testing::_; using ::testing::AtLeast; using ::testing::Invoke; class MockFoo : public Foo &#123; public: MockFoo() &#123; ON_CALL(*this, DoThis()) .WillByDefault(Invoke(&amp;real_, &amp;Foo::DoThis)); //调用真实的代码。 ... &#125; 12345MOCK_METHOD0(DoThis, ...); ... private: Foo real_; &#125;; 1234... MockFoo mock; EXPECT_CALL(mock, DoThis()) .Times(3); 有时想期望，有时想调用真实代码123456class MockFoo : public Foo &#123; public: MOCK_METHOD1(Pure, void(int n)); MOCK_METHOD1(Concrete, int(const char* str)); //调用Mock。 int FooConcrete(const char* str) &#123; return Foo::Concrete(str); &#125; //调用真实的代码。&#125;; 12345using ::testing::_; using ::testing::Invoke; ... EXPECT_CALL(foo, Concrete(_)) .WillOnce(Invoke(&amp;foo, &amp;MockFoo::FooConcrete)); 函数期望的参数大于等于12using ::testing::Ge; EXPECT_CALL(foo, DoThis(Ge(5))); 不为空12using ::testing::NotNull; EXPECT_CALL(foo, DoThat("Hello", NotNull())); 任何参数12using ::testing::_; EXPECT_CALL(foo, DoThat(_); 与、或、非1234567using ::testing::AllOf; using ::testing::Gt;using ::testing::HasSubstr; using ::testing::Ne; using ::testing::Not;EXPECT_CALL(foo, DoThis(AllOf(Gt(5), Ne(10)))); //&gt; 5 and != 10 EXPECT_CALL(foo, DoThat(Not(HasSubstr("blah")), NULL)); //不包含sub-string "blah". 类型转换1234class MockFoo : public Foo &#123; public: MOCK_METHOD1(DoThis, void(Derived* derived)); &#125;; 12using ::testing::SafeMatcherCast; EXPECT_CALL(foo, DoThis(SafeMatcherCast&lt;Derived*&gt;(m))); 使用SafeMatcherCast或MatcherCast，SafeMatcherCast比较严格，两个函数的区别是如果static_cast可以将T类型转换成类型U，那么MatcherCast就可以转换 重载函数非const GetBar()12EXPECT_CALL(foo, GetBar()).WillOnce(ReturnRef(bar1)); const GetBar()12EXPECT_CALL(Const(foo), GetBar()).WillOnce(ReturnRef(bar2)); 新规则覆盖老规则老规则1EXPECT_CALL(foo, DoThis(_)) .WillRepeatedly(Return('b')); 新规则1EXPECT_CALL(foo, DoThis(Lt(5))) .WillRepeatedly(Return('a')); 上记代码结果，如果foo.DoThis()被调用时参数值小于5，就会返回’a’，否则返回’b’ 参数匹配123456using ::testing::_; using ::testing::Lt; using ::testing::Ne; ... EXPECT_CALL(foo, InRange(Ne(0), _)) //第一个参数非0。.With(Lt()); //或者.With(AllArgs(Lt())) //第一个参数比第二个参数小。 1234567using ::testing::_; using ::testing::AllOf; using ::testing::Args; using ::testing::Lt; ... EXPECT_CALL(foo, Blah(_, _, _)) .With(AllOf(Args&lt;0, 1&gt;(Lt()), Args&lt;1, 2&gt;(Lt()))); //多个参数比较。 参数传递如果你想将这些参数传递给你自己的Predicate( 比如.With(0, 1)(Truly(&amp;MyPredicate)))，你的必须以tr1::tuple做为它的参数。Google Mock会将n个选中的参数作为单个tuple传递给Predicate。 Google Mock中的断言（Matchers）123456#include &lt;algorithm&gt; #include &lt;vector&gt; std::vector&lt;int&gt; v; ... // 在v中，多少元素 &gt;= 10? const int count = count_if(v.begin(), v.end(), Matches(Ge(10))); 满足 &gt;=0，&lt;=100，!=501Matches(AllOf(Ge(0), Le(100), Ne(50))) Matchers使用EXPECT_THAT、ASSERT_THAT12345678910#include "gmock/gmock.h" using ::testing::AllOf; using ::testing::Ge; using ::testing::Le; using ::testing::MatchesRegex; using ::testing::StartsWith; ... EXPECT_THAT(Foo(), StartsWith("Hello")); //Foo()返回一个以”Hello”开头的字符串。EXPECT_THAT(Bar(), MatchesRegex("Line \\d+")); //Bar()返回一个匹配”Line \\d+”的正则表达式。ASSERT_THAT(Baz(), AllOf(Ge(5), Le(10))); //Baz()返回一个在[5, 10]区间内的数字。 将自定义函数返回值传递给期望函数作为参数12345using ::testing::Truly;int IsEven(int n)&#123; return (n % 2) == 0 ? 1 : 0; &#125; ... // Bar()必须以even number形式被调用. EXPECT_CALL(foo, Bar(Truly(IsEven))); 上记代码含义：期望Bar被调用时，参数是偶数。 被期望函数的参数做比较12345using ::testing::Eq;using ::testing::ByRef;using ::testing::Lt; ...EXPECT_CALL(mock_obj, Foo(Eq(ByRef(bar)))); 调用Foo()时，期望参数和bar相等。 1EXPECT_CALL(mock_obj, Foo(Lt(ByRef(bar)))); 调用Foo()时，期望参数小于bar。 打印错误信息1GTEST_NONFATAL_FAILURE_("error message"); 参考书籍：《Google C++ Mocking Cookbook》]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
        <tag>C++测试</tag>
        <tag>测试</tag>
        <tag>BDD测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Google Mock笔记：GoogleMock基础语法]]></title>
    <url>%2F2019%2F03%2F18%2FGoogleMock%E7%AC%94%E8%AE%B0%EF%BC%9AGoogleMock%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[摘要本文主要记载什么情况下使用Google Mock、为什么要使用Google Mock，及Google C++ Mocking语言的最基本使用方法。高级语法请参照博主的另一篇文章GoogleMock笔记：GoogleMock高级语法。 概述Google Mock可以使你检查它不使用它的代码之间的交互。 基本使用规则 使用简单的宏描述你想Mock的接口。（可以理解为其他模块的接口。） 创建Mock对象，指定Mock对象的期望和行为。 用Mock对象测试代码。 使用库gtest/gtest.h、gmock/gmock.h 如何定义 自定义Mock类继承要Mock的类。 要Mock的接口必须是虚函数，否则使用模板Mock非虚函数，或加一个适配类(请参照GoogleMock笔记：Mock非虚函数)。 Mock一个接口的语法：MOCK_METHODn(接口名称, 接口返回类型(参数列表))，n是有几个参数的意思。如果是const函数，用MOCK_CONST_METHODn。例： 12345678#include "gmock/gmock.h" class MockTurtle : public Turtle &#123; public: ... MOCK_METHOD0(PenUp, void()); MOCK_METHOD2(GoTo, void(int x, int y)); MOCK_CONST_METHOD0(GetX, int()); &#125;; 技巧：如果定义工作量太大，可以在scripts/generator目录下找到一个gmock_gen.py工具，这个命令行工具需要安装Python 2.4。将C++文件名和抽象类名作为参数传入这个工具，它会打印Mock类的定义。 如何写测试用例123456789101112#include "path/to/mock-turtle.h" //Mock类#include "gmock/gmock.h" #include "gtest/gtest.h" using ::testing::AtLeast; //使用命名空间TEST(PainterTest, CanDrawSomething) &#123; //给该用例起个名字 MockTurtle turtle; EXPECT_CALL(turtle, PenDown()) //期望PenDown至少被调用一次 .Times(AtLeast(1)); Painter painter(&amp;turtle); //期望DrawCircle以参数0,0,10被调用一次，当调用DrawCircle时返回True。 EXPECT_TRUE(painter.DrawCircle(0, 0, 10)); &#125; Google Mock可以使用在任何测试框架中如果你用的是其他测试框架，如cppunit，只需要把main函数改成下面这样： 12345int main(int argc, char** argv) &#123; ::testing::GTEST_FLAG(throw_on_failure) = true; ::testing::InitGoogleMock(&amp;argc, argv); ... &#125; EXPECT_CALL()宏语法1234567using ::testing::Return;... EXPECT_CALL(turtle, GetX()) .Times(5) .WillOnce(Return(100)) .WillOnce(Return(150)) .WillRepeatedly(Return(200)); 上记语法的含义是：期望对象turtle中，GetX()被调用5次。第一次调用时，返回100；第二次调用时，返回150；第三次之后调用都返回200。 GoogleMock使用宏的原因：第一，它让期望更容易被认出来( 无论是grep还是人去阅读 )，第二，它允许Google Mock可以得到失败期望在源文件的位置，仍而使Debug更容易。 期望参数 当一个Mock函数需要带参数时，我们必须指定我们期望的参数的是什么： 1EXPECT_CALL(turtle, Forward(100)); //期望调用Forward时，参数为100 参数定义为任意： 123using ::testing::_; ... EXPECT_CALL(turtle, Forward(_ )); //期望调用Forward，参数任意。 一个内置的matchers可以在CheatSheet中找到，比如，下面是Ge( greater than or equal ) matcher的应用。 123using ::testing::Ge;... EXPECT_CALL(turtle, Forward(Ge(100))); //期望调用Forward，参数比100大。 期望被调用次数 期望GetX没有被调用： 12EXPECT_CALL(turtle, GetX()) .Times(0); 期望GetX被调用1次 12EXPECT_CALL(turtle, GetX()) .Times(1); 期望GetX至少被调用两次： 12EXPECT_CALL(turtle, GetX()) .Times(AtLeast(2)); 期望GetX被调用任意次数： 12EXPECT_CALL(turtle, GetX()) .Times(AnyNumber()); 期望GetX被调用1次，并以返回值为100返回： 12EXPECT_CALL(turtle, GetX()) .WillOnce(Return(100)); 期望GetX被重复调用，不论次数，并以返回值为100返回： 12EXPECT_CALL(turtle, GetX()) .WillRepeatedly(Return(100)); 如果Mock函数的返回类型是一个指针或是内置类型，那这个函数是有默认行为的( 一个void函数直接返回，bool函数返回false，其它函数返回0)。 我们在WillOnce()里除了写Return()还可以用ReturnRef( variable )，或是调用一个预先定义好的函数。 期望调用规则默认情况下，当一个Mock函数被调用时，Google Mock会通过定义顺序的逆序去查找期望，当找到一个与参数匹配的有效的期望时就停下来( 可以把这个它想成是“老的規则覆盖新的規则“ )。 期望匹配顺序默认情况下，即使是在前一个期望没有被匹配的情况下，一个期望仍然可以被匹配。换句话说，调用的匹配顺序不会按照期望指定的顺序去匹配。1234567891011using ::testing::InSequence;... TEST(FooTest, DrawsLineSegment) &#123; ... &#123; InSequence dummy; //期望调用都以一个严格的顺序来匹配。 EXPECT_CALL(turtle, PenDown()); EXPECT_CALL(turtle, Forward(100)); EXPECT_CALL(turtle, PenUp()); &#125; &#125; 创建InSequence的一个对象后，在这个对象作用域中的期望都会以顺序存放，并要求调用以这个顺序匹配。 期望是Sticky的turtle.GetX()返回10, 20, 30,…1234567891011using ::testing::InSequence;using ::testing::Return;... &#123; InSequence s; for (int i = 1; i &lt;= n; i++) &#123; EXPECT_CALL(turtle, GetX()) .WillOnce(Return(10*i)) .RetiresOnSaturation(); &#125; &#125; 参考书籍：《Google C++ Mocking Framework for Dummies》]]></content>
      <categories>
        <category>GoogleMock</category>
      </categories>
      <tags>
        <tag>GoogleMock</tag>
        <tag>C++测试</tag>
        <tag>测试</tag>
        <tag>BDD测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开发者网站]]></title>
    <url>%2F2019%2F03%2F15%2F%E5%BC%80%E5%8F%91%E8%80%85%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[此文件主要记载开发者能用到的网站，分享给需要的人，博主持续更新中… 安卓 安卓开发者官方网站：https://developer.android.google.cn Android Studio下载地址：https://developer.android.google.cn/studio/ 第三方免费Android模拟器Genymotion：https://www.genymotion.com/ Android Studio尚未包含的设备创建AVD需要的技术规格：https://www.phonearena.com/ 安卓API Demo下载地址：https://android.googlesource.com/platform/development.git/+/master/samples/ApiDemos/ 安卓源代码网站：http://androidxref.com/ 镜像网站，汇集了很多资源：https://www.androiddevtools.cn/ Java JDK下载地址：https://www.oracle.com/technetwork/java/javase/downloads/index.html 版本控制 Git下载地址：http://git-scm.com/downloads GitHub官网：http://github.com GitHub各种语言下，上传忽略的文件样例：http://github.com/github/gitignore Git教程：http://iissnan.com/progit/ 编码规范 阿里巴巴开发文档下载地址：https://edu.aliyun.com/certification/cldt04 博客搭建 （博客框架）Hexo官网：https://hexo.io/zh-cn/ （Hexo主题）NexT官网：https://theme-next.iissnan.com/getting-started.html （GitHub+Hexo+Next）博主搭建的个人博客：https://coder-mei.github.io/ （图标）Font Awesome官网：http://www.fontawesome.com.cn/ 其他 https://sh.gg/]]></content>
      <categories>
        <category>程序员</category>
      </categories>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
</search>
